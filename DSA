1. Which algorithm utilizes queues to explore all vertices in a graph in a breadth-first manner?
BFS explores vertices in a graph in breadth-first order, maintaining the order of processing vertices using a queue.

2. What is a common use of queues in tree-based problems?
Queues assist in performing level-order traversal by processing nodes at each level before moving to the next level, maintaining the order using a queue.

3. How are queues typically employed in implementing a cache?
Queues in cache implementation store the most recently used elements at the front and evict the least recently used elements from the back when the cache reaches its capacity.

4. What role do queues play in task scheduling in operating systems or concurrent programming?
Queues in task scheduling enqueue tasks based on their arrival order and dequeue them for execution, maintaining the sequence of task execution.

Arrays are a fundamental data structure in programming and can be used in various coding problems. Here are some real-time examples of how arrays are used:

5. Consider the given string “FootBall”. What character comes at the 3rd index of this string?
o,t,B,None of above 
6. In programming, what is the term of joining two or more strings together called?
Merging , Connecting ,Concatenating ,splitting
In the context of DSA, joining two or more strings together is called concatenation.
7. Let us consider two strings S1 and S2 of same length. What is the time complexity to check whether these strings are the same or not in the context of Data Structure and Algorithm?

Quadratic ,Constant ,Linear ,Logarithmic
Solution description
To check whether two strings S1 and S2 of the same length are the same, you need to compare each character of S1 with the corresponding character of S2. The time complexity for this comparison is O(n), where n is the length of the strings. This is because you need to perform a linear scan of the strings to ensure all characters match.

8. In DSA, consider the string s = “HappyLife”. Which of the following is not a legit subsequence of this string.

“HappyLife” , “appi” ,“yfe” , “yfi"

9. Consider the string s = “acehlpwxzz”. What is the time complexity of searching any character in the given string?
For the given sorted string s = "acehlpwxzz", the time complexity of searching for any character is O(logn), where n is the length of the string. This is because you can use binary search, which is efficient for sorted data. Binary search divides the search interval in half each time, resulting in a logarithmic time complexity.


 

Data Storage:

Lists and Databases: Arrays are often used to store data, such as a list of names, email addresses, or records in a database.
 

Matrix Operations:

Matrix Multiplication: When working with matrices in linear algebra or computer graphics, arrays represent and perform operations like matrix multiplication.
 

Counting and Tracking:

Frequency Count: Counting the occurrences of elements in an array, like counting the number of each letter in a given string.
Tracking Stock Prices: Keeping track of stock prices over time using an array to store historical data.
 

Image Processing:

Pixel Manipulation: In image processing, arrays represent pixels, and various operations like filtering, blurring, and sharpening are applied to these arrays.
 

Game Development:

2D Game Grids: Using arrays to manage game objects and their positions on a 2D grid. For example, in a game of chess or tic-tac-toe.
 

Histograms:

Color Histograms: In image processing or data analysis, creating histograms to visualise data distribution. Each bin in the histogram can be considered an element in an array.
 

Simulation:

Traffic Simulation: Modeling traffic flow using arrays to represent lanes and vehicles.
 

Geographic Information Systems (GIS):

Storing Spatial Data: Storing geographic coordinates (latitude and longitude) of locations in an array to perform spatial analysis.
 

Audio Processing:
Audio Samples: Storing audio samples in an array for processing tasks like filtering, compression, or feature extraction.


## Linked List
Some Important Points - 

There is a pointer which points to the starting node of the linked list. This pointer is known as HEAD. 
Sometimes , there is also a pointer which points towards the last node of the linked list,  this pointer is called TAIL.
The next pointer of the last node points towards NULL.
NULL means that the pointer is not pointing to anything.

The time complexity of inserting a node at the head of a linked list is O(1), as it involves updating only the head pointer without traversing the list.

# Types of Linked List
 
There are 3 types of linked list - 

Singly Linked List
Circular Linked List
Doubly Linked List

# Singly Linked List

In a singly linked list, there is only one pointer which points to the next node of the list.
As usual, there will only be one data value in the node.
The last node points towards NULL.
The HEAD points towards the first node.

# Circular Linked List
Circular Linked list is the same as the singly linked list with just one difference. It is that the last node of the linked list (tail) points towards the first node (head) forming a circular cycle.
No node in the linked list points towards NULL.
If we start from any node, then after traversal we will again come back to the same node.
Both the last node of the linked list and head pointer points towards the start node of the linked list.  

# Doubly Linked List

In a doubly linked list, there are two pointers.
The first pointer is called the next pointer which points to the next node in the list.
The second pointer is called the previous pointer which points to the previous node in the list.
As usual, there will only be one data value in the node.
The next pointer of the last node will be pointed towards NULL.
The previous pointer of the first node will be pointed towards NULL.

Which of the following is not a type of Linked List in DSA?
Doubly Linked List

Triply Linked List

Singly Linked List

Circular Linked List


What is the main advantage of the circular linked list in DSA?

It allows traversal in one direction.

It simplest insertion and deletion operations

It uses less memory than other lists

It accesses elements much faster than other lists.

Real Life applications of Linked List

 

# A linked list is used in many real-life applications which are used by millions of people.
Navigation in Browsers - The forward and backward navigation in any browser can be implemented by a Doubly Linked List. Here the webpages are taken as a data value, the forward navigation takes us to the next node, the backward navigation takes us to the previous node. Eg - Chrome, Safari, Brave etc.

Music and Video Players - Most of the video or music-playing apps use linked lists to create a playlist, play songs, add to favourite etc. Each song is represented as a node. Users can easily insert, delete any song from the favourites list. Eg - Spotify, Youtube Music, Saavn etc.

Undo/Redo Functionality - Linked lists are used in applications that require undo/redo functionality, such as text editors and graphic design software. Each node in the list stores the state of the document at a specific point in time. Eg - Google Docs, MS Paint, WhiteBoard etc.


# Stack
 Have you ever seen a pile of notebooks kept on the top of one another? Or you must have seen a pile of plates kept on the top of each other near the food stall in a function.
 This pile is generally known as Stack. Stack is also a type of data structure which can solve many interesting problems in a less amount of time.
 Let us understand stack in more detail. Here a simple representation of the stack data structure is shown in the memory of the computer.

# Some Important Points about Stack -

 In a stack, the data values are kept on the top of one another. It is shown in the above picture that 2 is the top most element, then 27, then 56 and 34 is the bottom most element.
 Stack follows the principle of LIFO (Last In First Out). It means the element which is put inside the stack most recently or most lastly will be taken back firstly. In the above example, 2 is pushed into the stack most recently and will be popped most initially. We can also apply this principle in general examples as well. Just like a plate which is kept on the top most recently will be used for serving food for the first time.
 Also, the element which is kept inside the stack for the first time will be accessed lastly. In the example, 34 is popped for the first time in the stack but will be accessed only if all the above elements are popped. Thus 34 will be accessed lastly.
 The different operations in the stack are - 
 PUSH - PUSH means to add an element in the stack. The new element will become the top most element of the stack. The size of the stack increases by 1.
 POP - POP means to remove an element from the stack. Obviously, the top most element will only be removed.
 
 TOP - TOP means to get the value of the topmost element of stack. If the stack is empty, there will be no top element. 2 is the topmost element of the shown stack.
 
 SIZE - SIZE gives us the count of elements in the stack. If the stack is empty, the size will be 0. The size of the shown stack is 4.
 EMPTY - EMPTY gives us a boolean value. It is true when the stack is empty and false otherwise. The above stack will give us the value false, because the stack is not empty.
 
 The time complexity of all the above operations is constant. O( 1 )




